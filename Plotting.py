import numpy as np
import matplotlib.pyplot as plt

### ------------------------------------  Plots with Risk Aversion as the function parameter ------------------------------------ ###

# fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(12, 4))

# beta_values = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9] #for first 3 models
# beta_values = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8] #for last model

###Conv_only_Perfect
# objectives = [954110.274330077, 953997.4921002968, 953688.0253755152, 953219.1483779099, 952621.3674774601, 951919.7426151212, 951134.9270269353, 950283.990835378, 949381.0768044019, 948437.9263465442]
# prices = [104.367608898754, 104.97373584627626, 105.54041858922335, 106.07138609053384, 106.56991163610262, 107.03888037574296, 107.48084521334641, 107.89807321613496, 108.29258467785424, 108.66618566627673]
# QuantityC = [np.array([13235.11552634, 14179.09527335, 55251.73141531]), np.array([13235.11552634, 14179.09527335, 54160.70290977]), np.array([13235.11552634, 14179.09527335, 53140.67397246]), np.array([13235.11552634, 14179.09527335, 52184.93247011]), np.array([13235.11552634, 14179.09527335, 51287.58648808]), np.array([13235.11552634, 14179.09527335, 50443.44275673]), np.array([13235.11552634, 14179.09527335, 49647.90604904]), np.array([13235.11552634, 14179.09527335, 48896.89564402]), np.array([13235.11552634, 14179.09527335, 48186.77501293]), np.array([13235.11552634, 14179.09527335, 47514.29323377])]
# Emis = [np.array([10511.80059207, 11309.71237175, 44313.7910299 ]), np.array([10511.80059207, 11309.71237175, 43438.74860202]), np.array([10511.80059207, 11309.71237175, 42620.65027253]), np.array([10511.80059207, 11309.71237175, 41854.11267942]), np.array([10511.80059207, 11309.71237175, 41134.4103043 ]), np.array([10511.80059207, 11309.71237175, 40457.37796609]), np.array([10511.80059207, 11309.71237175, 39819.3301345 ]), np.array([10511.80059207, 11309.71237175, 39216.99393079]), np.array([10511.80059207, 11309.71237175, 38647.45273369]), np.array([10511.80059207, 11309.71237175, 38108.09919182])]

###Conv_only_Cournot
# objectives = [894205.5953965482, 891049.1962944214, 887958.5970105204, 884934.4809805199, 881977.032467237, 879086.0373749004, 876260.9652224912, 873501.0373158223, 870805.276002747, 868172.5547566415]
# prices = [117.57886337542176, 117.95973440049858, 118.32291687617696, 118.66963319318269, 119.00099368719842, 119.3180094448253, 119.62160335483175, 119.91261958957392, 120.19183239313192, 120.45995251140067]
# QuantityC = [np.array([20457.50706782, 14689.0446218 , 23739.13246737]), np.array([20227.60476809, 14737.45310186, 23235.05844191]), np.array([20003.53874528, 14783.6232219 , 22759.22588845]), np.array([19785.31888801, 14827.7088265 , 22309.27077051]), np.array([19572.90914922, 14869.84974905, 21883.09069753]), np.array([19366.23865967, 14910.17340111, 21478.8091713 ]), np.array([19165.2104438 , 14948.79614565, 21094.74560461]), np.array([18969.70826639, 14985.82460359, 20729.39027788]), np.array([18779.60201587, 15021.35619643, 20381.38205059]), np.array([18594.7519375 , 15055.48098476, 20049.490969  ])]
# Emis = [np.array([16248.08143758, 11732.94402446, 19039.60162774]), np.array([16065.48483496, 11773.12056568, 18635.31690297]), np.array([15887.52361153, 11811.43938356, 18253.68281117]), np.array([15714.2056212 , 11848.02816116, 17892.80331367]), np.array([15545.5022341 , 11883.00295297, 17550.99222085]), np.array([15381.35716335, 11916.46950402, 17226.74451654]), np.array([15221.69338751, 11948.52438958, 16918.71231193]), np.array([15066.41858842, 11979.2560995 , 16625.68475993]), np.array([14915.42942684, 12008.7454886 , 16346.57017897]), np.array([14768.61490457, 12037.06730254, 16080.38210382])]

###Full_Risk_Perfect
# objectives = [2712297.196200206, 2712282.7801458444, 2712236.830197293, 2712154.8562113736, 2712031.708150523, 2711861.466206981, 2711632.5722189685, 2711334.4422885403, 2710983.228920701, 2710576.7736397977]
# prices = [80.58809485171885, 80.79108965366432, 81.00348665385928, 81.22595456742694, 81.4592273181416, 81.70411089803794, 81.95674511670322, 82.2012684006522, 82.44920559830531, 82.70062870733405]
# QuantityC = [np.array([8520.65417014, 1394.80900719, 8845.03238129]), np.array([8520.65417014, 1394.80900719, 8885.44028051]), np.array([8520.65417014, 1394.80900719, 8927.71976992]), np.array([8520.65417014, 1394.80900719, 8972.00396313]), np.array([8520.65417014, 1394.80900719, 9018.43895413]), np.array([8520.65417014, 1394.80900719, 9067.18518272]), np.array([8520.65417014, 1394.80900719, 9137.35597454]), np.array([8520.65417014, 1394.80900719, 9270.10306616]), np.array([8520.65417014, 1394.80900719, 9404.70350732]), np.array([8520.65417014, 1394.80900719, 9541.1963842 ])]
# QuantityR = [np.array([13924.89254634, 77829.54358743, 14954.13580727]), np.array([13924.89254634, 77423.74504471, 14954.13580727]), np.array([13924.89254634, 76999.15095496, 14954.13580727]), np.array([13924.89254634, 76554.42451732, 14954.13580727]), np.array([13924.89254634, 76088.09857503, 14954.13580727]), np.array([13924.89254634, 75598.56190264, 14954.13580727]), np.array([13924.89254634, 75073.64951721, 14954.13580727]), np.array([13924.89254634, 74500.76051448, 14954.13580727]), np.array([13924.89254634, 73919.87311755, 14954.13580727]), np.array([13924.89254634, 73330.81864442, 14954.13580727])]
# Emis = [np.array([6970.79712622, 1220.7061645 , 7189.95368517]), np.array([6970.79712622, 1220.7061645 , 7222.95807055]), np.array([6970.79712622, 1220.7061645 , 7257.49113435]), np.array([6970.79712622, 1220.7061645 , 7293.66160119]), np.array([6970.79712622, 1220.7061645 , 7331.58879779]), np.array([6970.79712622, 1220.7061645 , 7371.40376826]), np.array([6970.79712622, 1220.7061645 , 7426.90678555]), np.array([6970.79712622, 1220.7061645 , 7527.67346287]), np.array([6970.79712622, 1220.7061645 , 7629.84699493]), np.array([6970.79712622, 1220.7061645 , 7733.45705156])]

###Full_Risk_Cournot
# objectives = [2587940.545544411, 2587698.918029681, 2587406.179564485, 2587049.5274468944, 2586612.132327361, 2586071.5595033094, 2586652.6009159703, 2587381.0090089706, 2588199.5869806875]
# prices = [96.91924338477753, 97.02734885745399, 97.14765036875878, 97.28229394285717, 97.43395210696785, 97.60599363169248, 97.56961807448371, 97.51378797871071, 97.45083720327176]
# QuantityC = [np.array([12288.18409639,  8283.54333062, 13993.48780985]), np.array([12317.13949623,  8328.644655  , 14003.75803243]), np.array([12349.37217979,  8378.72768163, 14015.19069238]), np.array([12385.46027559,  8434.65444647, 14027.99085108]), np.array([12426.12403257,  8497.49564655, 14042.41398027]), np.array([12472.27171208,  8568.59717618, 14058.78223998]), np.array([12462.15913799,  8557.11639811, 14055.19491432]), np.array([12446.76154134,  8538.26145343, 14049.73294066]), np.array([12429.40010507,  8517.0017122 , 14043.57433619])]
# QuantityR = [np.array([13924.89254634, 28739.27515278, 18843.61720418]), np.array([13924.89254634, 29080.03419458, 18223.94136476]), np.array([13924.89254634, 29451.65061077, 17542.03385808]), np.array([13924.89254634, 29858.51740633, 16787.99360981]), np.array([13924.89254634, 30305.90371615, 15949.69451833]), np.array([13924.89254634, 30800.18492115, 15012.12109999]), np.array([13924.89254634, 30948.82689465, 14954.13580727]), np.array([13924.89254634, 31089.03558204, 14954.13580727]), np.array([13924.89254634, 31247.1267598 , 14954.13580727])]
# Emis = [np.array([ 9613.68763218,  6905.30037   , 11014.77461316]), np.array([ 9634.22150369,  6944.46638461, 11023.45910044]), np.array([ 9657.07947942,  6987.96318951, 11033.12654328]), np.array([ 9682.67154267,  7036.54083942, 11043.95034136]), np.array([ 9711.50846234,  7091.13107356, 11056.14652123]), np.array([ 9744.23433751,  7152.9052837 , 11069.98750101]), np.array([ 9737.06290041,  7142.7730191 , 11066.95406296]), np.array([ 9726.14355161,  7126.20441283, 11062.33542491]), np.array([ 9713.8315277 ,  7107.52261409, 11057.12771673])]


# axs[0].plot(beta_values, objectives, label='Social Welfare', marker='o', linestyle='-')

# axs[1].plot(beta_values, prices, label='Average Price', marker='o', linestyle='-')

# axs[0].plot(beta_values, np.transpose(QuantityC)[0], label="Con1", marker='o', linestyle='-')
# axs[0].plot(beta_values, np.transpose(QuantityC)[1], label="Con2", marker='o', linestyle='-')
# axs[0].plot(beta_values, np.transpose(QuantityC)[2], label="Con3", marker='o', linestyle='-')
# axs[0].plot(beta_values, np.transpose(QuantityR)[0], label="Ren1", marker='o', linestyle='-')
# axs[0].plot(beta_values, np.transpose(QuantityR)[1], label="Ren2", marker='o', linestyle='-')
# axs[0].plot(beta_values, np.transpose(QuantityR)[2], label="Ren3", marker='o', linestyle='-')

# axs[1].plot(beta_values, np.transpose(Emis)[0], label="Con1", marker='o', linestyle='-')
# axs[1].plot(beta_values, np.transpose(Emis)[1], label="Con2", marker='o', linestyle='-')
# axs[1].plot(beta_values, np.transpose(Emis)[2], label="Con3", marker='o', linestyle='-')

# axs[0].set_title("Social Welfare [€]" , fontsize=14)
# axs[0].set_ylabel('Social Welfare [€]' , fontsize=11)
# axs[0].set_xlabel('Risk Profile [β]' , fontsize=11)
# axs[0].legend(loc="upper left")
# axs[0].set_xlim([-0.05, 0.95])

# axs[1].set_title("Average Electricity Price [€/MWh]" , fontsize=14)
# axs[1].set_ylabel('Average Prices [€/MWh]' , fontsize=11)
# axs[1].set_xlabel('Risk Profile [β]' , fontsize=11)
# axs[1].legend(loc="upper left")
# axs[1].set_xlim([-0.05, 0.95])

# axs[0].set_title("Electricity production by generator [MWh]" , fontsize=14)
# axs[0].set_ylabel('Quantity produced [MWh]' , fontsize=11)
# axs[0].set_xlabel('Risk Profile [β]' , fontsize=11)
# axs[0].legend(loc="upper left")
# axs[0].set_xlim([-0.05, 0.95])
# axs[0].ticklabel_format(style='sci', axis='y', scilimits=(3, 3))

# axs[1].set_title("Emissions [kT]" , fontsize=14)
# axs[1].set_ylabel('Emissions[kT]' , fontsize=11)
# axs[1].set_xlabel('Risk Profile [β]' , fontsize=11)
# axs[1].legend(loc="upper left")
# axs[1].set_xlim([-0.05, 0.95])
# axs[1].ticklabel_format(style='sci', axis='y', scilimits=(3, 3))

# plt.savefig('Full_Model_Cournot_Risk1.png')
# plt.savefig('Corv_Model_Cournot2.png')

# plt.show()

### ------------------------------------  Plots with the Market Competition as the function parameter ------------------------------------ ###

# fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(12, 4))

# Phi_values = [-1, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 0] 

###Full_Risk0
# objectives = [2712297.1962002073, 2706467.7095275368, 2690712.1964620207, 2668173.29783222, 2650783.92910305, 2636854.0577513287, 2625350.121053126, 2615195.692370774, 2605801.7268042425, 2596720.5398126966, 2587940.54554441]
# prices = [80.58809485171884, 84.45053661463179, 87.40222568423445, 89.20530513541809, 90.59630904941777, 91.84359536185919, 93.00807848007292, 94.09495597744893, 95.1110783109338, 96.04761913062764, 96.91924338477753]
# QuantityC = [np.array([8520.65417014, 1394.80900719, 8845.03238129]), np.array([ 8520.65417012,  1583.30958558, 10211.23198355]), np.array([ 8520.65417023,  3181.24427007, 12308.94569794]), np.array([ 9302.05239574,  5389.3527101 , 13250.38757868]), np.array([10222.50082285,  6570.68826525, 13475.9283165 ]), np.array([11042.09681116,  7351.20983215, 13644.81519094]), np.array([11568.25595437,  7707.47255424, 13759.37913469]), np.array([11862.24345554,  7909.53223372, 13841.3405431 ]), np.array([12039.64219357,  8030.29549835, 13903.06495552]), np.array([12179.9857673 ,  8166.57070802, 13953.4232052 ]), np.array([12288.18409639,  8283.54333062, 13993.48780985])]
# QuantityR = [np.array([13924.89254634, 77829.54358743, 14954.13580727]), np.array([13924.89254634, 69322.44823355, 14954.13580727]), np.array([13924.89254634, 60313.75950928, 14954.13580727]), np.array([13924.89254634, 50548.76439328, 17542.63936487]), np.array([13924.89254634, 43986.6593986 , 19273.61259426]), np.array([13924.89254634, 39490.50428706, 19755.64791377]), np.array([13924.89254634, 36296.03367587, 19857.06310313]), np.array([13924.89254634, 33852.39094709, 19766.31774755]), np.array([13924.89254634, 31876.32583634, 19553.47624295]), np.array([13924.89254634, 30192.37428803, 19224.67728274]), np.array([13924.89254634, 28739.27515278, 18843.61720418])]
# Emis = [np.array([6970.79712622, 1220.7061645 , 7189.95368517]), np.array([6970.79712621, 1369.39817227, 8234.29800364]), np.array([6970.79712629, 2719.59658669, 9708.28331807]), np.array([ 7520.78564137,  4530.01955565, 10386.40999395]), np.array([ 8166.65902241,  5497.75228678, 10577.12695768]), np.array([ 8737.43870543,  6137.27666505, 10719.9374858 ]), np.array([ 9104.4754982 ,  6431.29713893, 10816.81261241]), np.array([ 9311.15523229,  6597.65579081, 10886.1190761 ]), np.array([ 9436.97715504,  6696.48712867, 10938.31316147]), np.array([ 9536.68163223,  6808.01840078, 10980.89603395]), np.array([ 9613.68763218,  6905.30037   , 11014.77461316])]

###Full_Risk0.5
# objectives = [2711861.466206981, 2701579.48180425, 2689316.8153931703, 2669979.0463390574, 2653189.6822542045, 2639129.1827204875, 2626866.710160114, 2615638.644103178, 2605038.385065751, 2595198.3027683147, 2586071.5595036494]
# prices = [81.70411089803794, 85.53578402911835, 87.56556205785125, 89.51772817170675, 91.05227067228039, 92.42937894106574, 93.71485697958825, 94.86833500380688, 95.87514378830494, 96.78620366554398, 97.60599363169315]
# QuantityC = [np.array([8520.65417014, 1394.80900719, 9067.18518272]), np.array([ 8520.65417014,  2038.50251887, 11143.33692971]), np.array([ 8520.65417014,  3401.36358814, 12429.22486654]), np.array([ 9482.08788119,  5712.74906736, 13304.02500611]), np.array([10682.2409774 ,  7071.49808096, 13561.65567232]), np.array([11493.79336174,  7713.33623162, 13730.62650682]), np.array([11868.53173643,  8040.47196886, 13843.36982172]), np.array([12104.8147151 ,  8225.67340624, 13924.23128399]), np.array([12273.69940643,  8395.82365492, 13984.14505878]), np.array([12392.63321625,  8505.74003863, 14028.00318309]), np.array([12472.27171208,  8568.59717618, 14058.78223998])]
# QuantityR = [np.array([13924.89254634, 75598.56190264, 14954.13580727]), np.array([13924.89254634, 65981.70500802, 14954.13580727]), np.array([13924.89254634, 59679.35555019, 14954.13580727]), np.array([13924.89254634, 52017.83721541, 14954.13580727]), np.array([13924.89254634, 46439.12793836, 14954.13580727]), np.array([13924.89254634, 42337.97168505, 14954.13580727]), np.array([13924.89254634, 39209.49378888, 14954.13580727]), np.array([13924.89254634, 36630.88746696, 14954.13580727]), np.array([13924.89254634, 34419.68294007, 14954.13580727]), np.array([13924.89254634, 32502.68807991, 14958.51457056]), np.array([13924.89254635, 30800.18492114, 15012.12109999])]
# Emis = [np.array([6970.79712622, 1220.7061645 , 7371.40376826]), np.array([6970.79712622, 1740.82842352, 8896.68300446]), np.array([6970.79712622, 2900.57072574, 9791.69409168]), np.array([ 7648.41323706,  4797.58618072, 10431.76573501]), np.array([ 8485.91583669,  5912.10616869, 10649.61790175]), np.array([ 9051.28297588,  6441.84420203, 10792.49942651]), np.array([ 9315.39388433,  6712.03076647, 10887.83503154]), np.array([ 9482.83310574,  6865.01688081, 10956.21138216]), np.array([ 9602.74895812,  7009.53619414, 11006.87439463]), np.array([ 9687.38972089,  7101.65520201, 11043.96076929]), np.array([ 9744.23433751,  7152.90528369, 11069.98750101])]

###Full_Risk0.7
# objectives = [2711334.4422885403, 2699521.5593835614, 2688566.9050799888, 2669753.5662229154, 2653606.966167934, 2639915.8612508364, 2627785.0743637984, 2616668.06289771, 2606205.9432206936, 2596473.5325097097, 2587381.009008995]
# prices = [82.2012684006522, 85.92145751202192, 87.6631272294888, 89.53906059983825, 91.02161227679808, 92.36414238732814, 93.63296322297917, 94.77906634599623, 95.78018045762701, 96.68641926111927, 97.5137879787107]
# QuantityC = [np.array([8520.65417014, 1394.80900719, 9270.10306616]), np.array([ 8520.65417014,  2255.61242176, 11445.44183907]), np.array([ 8520.65417014,  3516.18878056, 12468.12152597]), np.array([ 9494.41503672,  5738.77136397, 13308.13349407]), np.array([10649.20762111,  7031.09140442, 13555.07165742]), np.array([11442.2827811 ,  7668.15371203, 13720.12617925]), np.array([11837.43380165,  7996.55285907, 13832.90139746]), np.array([12074.76495301,  8189.41559415, 13913.96157142]), np.array([12243.78315632,  8358.72000288, 13973.78059757]), np.array([12363.28371092,  8469.65102515, 14017.70859536]), np.array([12446.76154134,  8538.26145343, 14049.73294066])]
# QuantityR = [np.array([13924.89254634, 74500.76051448, 14954.13580727]), np.array([13924.89254634, 64768.27792655, 14954.13580727]), np.array([13924.89254634, 59350.0163894 , 14954.13580727]), np.array([13924.89254634, 51936.98090468, 14954.13580727]), np.array([13924.89254634, 46574.33709795, 14954.13580727]), np.array([13924.89254634, 42562.59090957, 14954.13580727]), np.array([13924.89254634, 39442.38801961, 14954.13580727]), np.array([13924.89254634, 36868.14833778, 14954.13580727]), np.array([13924.89254634, 34668.00129865, 14954.13580727]), np.array([13924.89254634, 32762.41187771, 14954.13580727]), np.array([13924.89254634, 31089.03558204, 14954.13580727])]
# Emis = [np.array([6970.79712622, 1220.7061645 , 7527.67346287]), np.array([6970.79712622, 1922.92588351, 9107.31748019]), np.array([6970.79712622, 2994.92913726, 9818.14685239]), np.array([ 7657.19578433,  4818.97018644, 10435.23986725]), np.array([ 8462.94132131,  5878.90169733, 10644.05046705]), np.array([ 9015.43316804,  6404.13968047, 10783.62036274]), np.array([ 9293.40180823,  6675.38055224, 10878.98294517]), np.array([ 9461.56549614,  6833.84729084, 10947.52732614]), np.array([ 9581.56055104,  6976.93170698, 10998.11021929]), np.array([ 9666.58893921,  7069.93885021, 11035.25567887]), np.array([ 9726.14355161,  7126.20441283, 11062.33542491])]

# axs[0].plot(Phi_values, objectives, label='Social Welfare', marker='o', linestyle='-')

# axs[1].plot(Phi_values, prices, label='Average Price', marker='o', linestyle='-')

# axs[0].plot(Phi_values, np.transpose(QuantityC)[0], label="Con1", marker='o', linestyle='-')
# axs[0].plot(Phi_values, np.transpose(QuantityC)[1], label="Con2", marker='o', linestyle='-')
# axs[0].plot(Phi_values, np.transpose(QuantityC)[2], label="Con3", marker='o', linestyle='-')
# axs[0].plot(Phi_values, np.transpose(QuantityR)[0], label="Ren1", marker='o', linestyle='-')
# axs[0].plot(Phi_values, np.transpose(QuantityR)[1], label="Ren2", marker='o', linestyle='-')
# axs[0].plot(Phi_values, np.transpose(QuantityR)[2], label="Ren3", marker='o', linestyle='-')

# axs[1].plot(Phi_values, np.transpose(Emis)[0], label="Con1", marker='o', linestyle='-')
# axs[1].plot(Phi_values, np.transpose(Emis)[1], label="Con2", marker='o', linestyle='-')
# axs[1].plot(Phi_values, np.transpose(Emis)[2], label="Con3", marker='o', linestyle='-')

# axs[0].set_title("Social Welfare [€]" , fontsize=14)
# axs[0].set_ylabel('Social Welfare [€]' , fontsize=11)
# axs[0].set_xlabel('Conjectural Variation [Φ]' , fontsize=11)
# axs[0].legend(loc="upper left")
# axs[0].set_xlim([-1.05, 0.05])

# axs[1].set_title("Average Electricity Price [€/MWh]" , fontsize=14)
# axs[1].set_ylabel('Average Prices [€/MWh]' , fontsize=11)
# axs[1].set_xlabel('Conjectural Variation [Φ]' , fontsize=11)
# axs[1].legend(loc="upper left")
# axs[1].set_xlim([-1.05, 0.05])

# axs[0].set_title("Electricity production by generator [MWh]" , fontsize=14)
# axs[0].set_ylabel('Quantity produced [MWh]' , fontsize=11)
# axs[0].set_xlabel('Conjectural Variation [Φ]' , fontsize=11)
# axs[0].legend(loc="upper left")
# axs[0].set_xlim([-1.05, 0.05])
# axs[0].ticklabel_format(style='sci', axis='y', scilimits=(3, 3))

# axs[1].set_title("Emissions [kT]" , fontsize=14)
# axs[1].set_ylabel('Emissions[kT]' , fontsize=11)
# axs[1].set_xlabel('Conjectural Variation [Φ]' , fontsize=11)
# axs[1].legend(loc="upper left")
# axs[1].set_xlim([-1.05, 0.05])
# axs[1].ticklabel_format(style='sci', axis='y', scilimits=(3, 3))

# plt.savefig('Full_Model_Risk0.7_Market1.png')

# plt.show()

### ------------------------------------  Plots with the Slope as the function parameter ------------------------------------ ###

# fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(12, 4))

# Alpha_values = [0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009, 0.010, 0.011, 0.012]

###Full_Alpha_Perfect
# objectives = [4912924.356817982, 3693555.551351825, 3081050.6520283716, 2711861.4662425346, 2463918.0343148327, 2285231.100547959, 2150444.365258798, 2044932.6901154045, 1962576.0347712312, 1891564.2066549181, 1830898.9862387846]
# prices = [82.17383240244187, 82.01401345585147, 81.94406779086229, 81.70411085250093, 81.84472971890006, 82.22232400983737, 82.5483467525201, 82.7270061832727, 79.4078647743179, 78.52350895707366, 76.72679408713056]
# QuantityC = [np.array([8520.65417014, 2779.6515882 , 9608.11421066]), np.array([8520.65417014, 1558.67761976, 9608.11421066]), np.array([8520.65417014, 1394.80900719, 9608.11421066]), np.array([8520.65417014, 1394.80900719, 9067.18517365]), np.array([8520.65417014, 1394.80900719, 9199.66033282]), np.array([8520.65417014, 1394.80900719, 9940.55204837]), np.array([ 8520.65417014,  1394.80900719, 10729.66119162]), np.array([ 8520.65417014,  1394.80900719, 11766.55583044]), np.array([8118.20827536, 1267.90345882, 9484.53016602]), np.array([5325.01296741,  560.38604008, 7909.10303232]), np.array([2625.07044037,    0.        , 7623.58433863])]
# QuantityR = [np.array([ 13924.89254634, 256749.4014483 ,  14954.13580727]), np.array([ 13924.89254634, 156270.88233288,  14954.13580727]), np.array([ 13924.89254634, 105382.78951991,  14954.13580727]), np.array([13924.89254634, 75598.56199367, 14954.13580727]), np.array([13924.89254634, 54678.45208519, 14954.13580727]), np.array([13924.89254634, 38784.56714573, 14954.13580727]), np.array([13924.89254634, 26688.73107633, 14954.13580727]), np.array([13924.89254634, 17005.07880688, 14954.13580727]), np.array([13924.89254634, 16047.07056569, 14954.13580727]), np.array([13924.89254634, 16047.07056569, 14954.13580727]), np.array([13924.89254634, 16047.07056569, 14954.13580727])]
# Emis = [np.array([6970.79712622, 2352.05740544, 7813.22406688]), np.array([6970.79712622, 1349.96811808, 7813.22406688]), np.array([6970.79712622, 1220.7061645 , 7813.22406688]), np.array([6970.79712622, 1220.7061645 , 7371.40376085]), np.array([6970.79712622, 1220.7061645 , 7439.05095606]), np.array([6970.79712622, 1220.7061645 , 7945.59790039]), np.array([6970.79712622, 1220.7061645 , 8487.47733765]), np.array([6970.79712622, 1220.7061645 , 9254.75069993]), np.array([6639.32546151, 1109.64121983, 7532.80268194]), np.array([4407.62785552,  490.43753668, 6395.39187349]), np.array([2236.48970298,    0.        , 6192.29870441])]

###Full_Alpha_Cournot
# objectives = [4416487.851183619, 3405065.552839059, 2896913.447947524, 2586071.5595033146, 2382221.5944208857, 2232247.7637724443, 2128293.675104079, 2036497.0626374083, 1955573.4904504009, 1884487.8899927437, 1822309.8148886084]
# prices = [100.52827359917548, 99.86373778797594, 99.07828015165265, 97.60599363169251, 95.30514321129526, 93.39746961252042, 89.96806704374612, 87.03029224652283, 84.67513100785112, 82.3494034514516, 79.56612017702206]
# QuantityC = [np.array([12534.74961046,  9643.94535273, 14130.47472072]), np.array([12533.130316  ,  9168.22182853, 14122.46705522]), np.array([12523.7229825 ,  8911.2885787 , 14109.86553619]), np.array([12472.27171208,  8568.59717618, 14058.78223998]), np.array([11690.11556451,  6255.63972863, 13842.13625349]), np.array([11047.90214132,  4416.5372436 , 12761.02807451]), np.array([ 9651.30897595,  2132.24687763, 11156.04369838]), np.array([7286.7427918 , 1137.1635264 , 9912.83486752]), np.array([5106.94883748,  633.95172941, 8389.20172313]), np.array([3709.32530668,  367.30814508, 6587.59127446]), np.array([2624.77314732,  217.63857955, 5276.74848471])]
# QuantityR = [np.array([35877.05565052, 95796.88103787, 55958.75801329]), np.array([20646.44141497, 60648.17659749, 34169.74647846]), np.array([13924.89254634, 42780.67674409, 22982.9710619 ]), np.array([13924.89254634, 30800.18492115, 15012.12109999]), np.array([13924.89254634, 21815.06381012, 14954.13580727]), np.array([13924.89254634, 16047.07056569, 14954.13580727]), np.array([13924.89254634, 16047.07056569, 14954.13580727]), np.array([13924.89254634, 16047.07056569, 14954.13580727]), np.array([13924.89254634, 16047.07056569, 14954.13580727]), np.array([13924.89254634, 16047.07056569, 14954.13580727]), np.array([13924.89254634, 16047.07056569, 14954.13580727])]
# Emis = [np.array([ 9792.68347755,  8048.85152013, 11130.6105724 ]), np.array([ 9791.42132959,  7656.08457175, 11123.83930054]), np.array([ 9784.088848  ,  7443.95529216, 11113.18347193]), np.array([ 9744.23433751,  7152.9052837 , 11069.98750101]), np.array([ 9197.3105908 ,  5222.06118353, 10890.39578451]), np.array([ 8746.4122415 ,  3702.44759715, 10074.39280412]), np.array([7747.9608231 , 1819.07726843, 8857.66788388]), np.array([5930.41472011,  989.1025192 , 7916.19881465]), np.array([4231.84525194,  554.82060991, 6753.42324396]), np.array([3109.37255648,  321.46000969, 5387.9505167 ]), np.array([2219.11833256,  190.4724979 , 4352.77373428])]

# axs[0].plot(Alpha_values, objectives, label='Social Welfare', marker='o', linestyle='-')

# axs[1].plot(Alpha_values, prices, label='Average Price', marker='o', linestyle='-')

# axs[0].plot(Alpha_values, np.transpose(QuantityC)[0], label="Con1", marker='o', linestyle='-')
# axs[0].plot(Alpha_values, np.transpose(QuantityC)[1], label="Con2", marker='o', linestyle='-')
# axs[0].plot(Alpha_values, np.transpose(QuantityC)[2], label="Con3", marker='o', linestyle='-')
# axs[0].plot(Alpha_values, np.transpose(QuantityR)[0], label="Ren1", marker='o', linestyle='-')
# axs[0].plot(Alpha_values, np.transpose(QuantityR)[1], label="Ren2", marker='o', linestyle='-')
# axs[0].plot(Alpha_values, np.transpose(QuantityR)[2], label="Ren3", marker='o', linestyle='-')

# axs[1].plot(Alpha_values, np.transpose(Emis)[0], label="Con1", marker='o', linestyle='-')
# axs[1].plot(Alpha_values, np.transpose(Emis)[1], label="Con2", marker='o', linestyle='-')
# axs[1].plot(Alpha_values, np.transpose(Emis)[2], label="Con3", marker='o', linestyle='-')

# axs[0].set_title("Social Welfare [€]" , fontsize=14)
# axs[0].set_ylabel('Social Welfare [€]' , fontsize=11)
# axs[0].set_xlabel('Slope [α]' , fontsize=11)
# axs[0].legend(loc="upper left")
# axs[0].set_xlim([0.001, 0.013])

# axs[1].set_title("Average Electricity Price [€/MWh]" , fontsize=14)
# axs[1].set_ylabel('Average Prices [€/MWh]' , fontsize=11)
# axs[1].set_xlabel('Slope [α]' , fontsize=11)
# axs[1].legend(loc="upper left")
# axs[1].set_xlim([0.001, 0.013])

# axs[0].set_title("Electricity production by generator [MWh]" , fontsize=14)
# axs[0].set_ylabel('Quantity produced [MWh]' , fontsize=11)
# axs[0].set_xlabel('Slope [α]' , fontsize=11)
# axs[0].legend(loc="upper left")
# axs[0].set_xlim([0.001, 0.013])
# axs[0].ticklabel_format(style='sci', axis='y', scilimits=(3, 3))

# axs[1].set_title("Emissions [kT]" , fontsize=14)
# axs[1].set_ylabel('Emissions[kT]' , fontsize=11)
# axs[1].set_xlabel('Slope [α]' , fontsize=11)
# axs[1].legend(loc="upper left")
# axs[1].set_xlim([0.001, 0.013])
# axs[1].ticklabel_format(style='sci', axis='y', scilimits=(3, 3))

# plt.savefig('Full_Model_Courn_Alpha1.png')

# plt.show()

### ------------------------------------ Plots with the Intercept as the function parameter ------------------------------------ ###

fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(12, 4))

Beta_tw_values = [100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150]

###Full_BetaTW_Perfect
objectives = [1298408.4977985069, 1379741.5200379516, 1474572.8829514496, 1576904.4373298606, 1686750.7084556732, 1805259.154415519, 1942702.531628203, 2098419.9194162153, 2268880.6584576988, 2453923.7351122387, 2653582.3969714674]
prices = [74.83758522977091, 75.52418496286562, 76.74561045973951, 80.0220630198562, 81.75402392298295, 84.71802893121284, 85.59503186115786, 85.21991246030207, 84.89390447446779, 84.5810572308386, 84.3416276478124]
QuantityC = [np.array([216.68229986,   0.        , 394.82714346]), np.array([1832.21813181,    0.        , 6543.41179195]), np.array([ 2735.21177084,     0.        , 12441.85225854]), np.array([ 3644.06232062,     0.        , 14635.38710055]), np.array([ 9118.17266046,     0.        , 15043.74713509]), np.array([12782.96364564,     0.        , 15043.74713509]), np.array([12935.01077935,     0.        , 15043.74713509]), np.array([12789.43825622,     0.        , 15043.74713509]), np.array([12322.19024268,     0.        , 15043.74713509]), np.array([11770.29196663,     0.        , 15043.74713509]), np.array([10950.73291586,    47.12616099, 15043.74713509])]
QuantityR = [np.array([13937.20756322, 15742.45746817, 15001.17211169]), np.array([13937.20756322, 15742.45746817, 15001.17211169]), np.array([13937.20756322, 15742.45746817, 15001.17211169]), np.array([13937.20756322, 15742.45746817, 15001.17211169]), np.array([13937.20756322, 15742.45746817, 15001.17211169]), np.array([13937.20756322, 15742.45746817, 15001.17211169]), np.array([13937.20756322, 23011.80506056, 15001.17211169]), np.array([13937.20756322, 32832.59250524, 15001.17211169]), np.array([13937.20756322, 42886.65489328, 15001.17211168]), np.array([13937.20756322, 53001.67820787, 15001.17211168]), np.array([13937.20756322, 63205.08434709, 15001.17211168])]
Emis = [np.array([140.77697575,   0.        , 291.17927417]), np.array([1307.46216108,    0.        , 5186.40311495]), np.array([2007.16670885,    0.        , 9968.72209263]), np.array([ 2653.05237279,     0.        , 11777.29278156]), np.array([ 7163.67890232,     0.        , 12092.70863929]), np.array([10199.63628918,     0.        , 12092.70863929]), np.array([10332.23845465,     0.        , 12092.70863929]), np.array([10205.28287628,     0.        , 12092.70863929]), np.array([ 9834.700099  ,     0.        , 12092.70863929]), np.array([ 9399.80271273,     0.        , 12092.70863929]), np.array([ 8759.79158367,    41.63339383, 12092.70863929])]

###Full_BetaTW_Cournot
# objectives = [1298383.7757590278, 1378003.2824212404, 1468858.6445131388, 1570636.6144627577, 1682407.9768747375, 1801911.1809872584, 1924775.113368999, 2053066.085003313, 2195132.062261034, 2357476.1785862423, 2533780.2629828434]
# prices = [75.00744896402915, 77.75429323007711, 79.98324129784208, 82.1579128594521, 84.05896285990178, 86.46813819187737, 89.71720151554308, 92.38532393168724, 94.46546174257168, 96.01885442625003, 97.64076925749492]
# QuantityC = [np.array([108.34114993,   0.        , 197.41357174]), np.array([ 742.48898501,    0.        , 3618.94605777]), np.array([1718.27594105,    0.        , 7631.05257975]), np.array([ 3283.16913369,     0.        , 11151.75057621]), np.array([ 6362.66777033,     0.        , 13650.36193876]), np.array([ 9465.41416733,   178.59606719, 15032.50387702]), np.array([11748.82767461,  1035.62531924, 15043.74713509]), np.array([12793.30340056,  4188.52924422, 15043.74713509]), np.array([13078.97318267,  7932.77821611, 15043.74713509]), np.array([13287.92769658, 10728.88504673, 15043.74713509]), np.array([13405.35609351, 13185.25395486, 15043.74713509])]
# QuantityR = [np.array([13937.20756322, 15742.45746817, 15001.17211169]), np.array([13937.20756322, 15742.45746817, 15001.17211169]), np.array([13937.20756322, 15742.45746817, 15001.17211169]), np.array([13937.20756322, 15742.45746817, 15001.17211169]), np.array([13937.20756322, 15742.45746817, 15001.17211169]), np.array([13937.20756322, 15742.45746817, 15001.17211169]), np.array([13937.20756322, 15742.45746817, 15001.17211169]), np.array([13937.20756322, 15742.45746817, 15001.17211169]), np.array([13937.20756322, 16968.29065459, 15001.17211169]), np.array([13937.20756322, 20167.12247944, 15001.17211169]), np.array([13937.20756322, 23673.87847814, 15001.17211169])]
# Emis = [np.array([ 70.38848788,   0.        , 145.58963709]), np.array([ 525.9923638 ,    0.        , 2876.67997972]), np.array([1237.65268782,    0.        , 6135.34211829]), np.array([2430.92972929,    0.        , 8985.02327262]), np.array([ 4923.81070433,     0.        , 10987.6726795 ]), np.array([ 7482.31606306,   133.12334496, 12084.41224632]), np.array([ 9355.13908199,   749.64976746, 12092.70863929]), np.array([10208.65371595,  3197.35210879, 12092.70863929]), np.array([10457.78982784,  6161.23420838, 12092.70863929]), np.array([10640.02161579,  8392.1601859 , 12092.70863929]), np.array([10742.43235739, 10333.79141772, 12092.70863929])]

# axs[0].plot(Beta_tw_values, objectives, label='Social Welfare', marker='o', linestyle='-')

# axs[1].plot(Beta_tw_values, prices, label='Average Price', marker='o', linestyle='-')

axs[0].plot(Beta_tw_values, np.transpose(QuantityC)[0], label="Con1", marker='o', linestyle='-')
axs[0].plot(Beta_tw_values, np.transpose(QuantityC)[1], label="Con2", marker='o', linestyle='-')
axs[0].plot(Beta_tw_values, np.transpose(QuantityC)[2], label="Con3", marker='o', linestyle='-')
axs[0].plot(Beta_tw_values, np.transpose(QuantityR)[0], label="Ren1", marker='o', linestyle='-')
axs[0].plot(Beta_tw_values, np.transpose(QuantityR)[1], label="Ren2", marker='o', linestyle='-')
axs[0].plot(Beta_tw_values, np.transpose(QuantityR)[2], label="Ren3", marker='o', linestyle='-')

axs[1].plot(Beta_tw_values, np.transpose(Emis)[0], label="Con1", marker='o', linestyle='-')
axs[1].plot(Beta_tw_values, np.transpose(Emis)[1], label="Con2", marker='o', linestyle='-')
axs[1].plot(Beta_tw_values, np.transpose(Emis)[2], label="Con3", marker='o', linestyle='-')

# axs[0].set_title("Social Welfare [€]" , fontsize=14)
# axs[0].set_ylabel('Social Welfare [€]' , fontsize=11)
# axs[0].set_xlabel(r'Intercept [$\beta_{t\omega}$]' , fontsize=11)
# axs[0].legend(loc="upper left")
# axs[0].set_xlim([95, 155])

# axs[1].set_title("Average Electricity Price [€/MWh]" , fontsize=14)
# axs[1].set_ylabel('Average Prices [€/MWh]' , fontsize=11)
# axs[1].set_xlabel(r'Intercept [$\beta_{t\omega}$]' , fontsize=11)
# axs[1].legend(loc="upper left")
# axs[1].set_xlim([95, 155])

axs[0].set_title("Electricity production by generator [MWh]" , fontsize=14)
axs[0].set_ylabel('Quantity produced [MWh]' , fontsize=11)
axs[0].set_xlabel(r'Intercept [$\beta_{t\omega}$]' , fontsize=11)
axs[0].legend(loc="upper left")
axs[0].set_xlim([95, 155])
axs[0].ticklabel_format(style='sci', axis='y', scilimits=(3, 3))

axs[1].set_title("Emissions [kT]" , fontsize=14)
axs[1].set_ylabel('Emissions[kT]' , fontsize=11)
axs[1].set_xlabel(r'Intercept [$\beta_{t\omega}$]' , fontsize=11)
axs[1].legend(loc="upper left")
axs[1].set_xlim([95, 155])
axs[1].ticklabel_format(style='sci', axis='y', scilimits=(3, 3))

plt.savefig('Full_Model_Perf_BetaTW2.png')

plt.show()

